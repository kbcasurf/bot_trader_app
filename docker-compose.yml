services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - bot-network

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      args:
      - VITE_BACKEND_URL=${VITE_BACKEND_URL}
    container_name: frontend
    restart: unless-stopped
    # ports removed as Traefik will handle this
    environment:
      - NODE_ENV=production
      - VITE_BACKEND_URL=${VITE_BACKEND_URL}
    volumes:
      - ./frontend/images:/usr/share/nginx/html/images:ro
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - bot-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"


  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    # ports removed as Traefik will handle this
    networks:
      - bot-network
    volumes:
      - ./.env:/app/.env:ro
    environment:
      # Add connection configuration
      - DB_CONNECTION_LIMIT=20
      - DB_CONNECT_TIMEOUT=20000
      - API_TIMEOUT_MS=10000
      # WebSocket configuration
      - WS_RECONNECT_DELAY=2000
      - WS_MAX_RECONNECT_DELAY=60000
      - WS_HEARTBEAT_TIMEOUT=30000
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      database:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-api.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend-api.entrypoints=websecure"
      - "traefik.http.routers.backend-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend-api.loadbalancer.server.port=3000"
      - "traefik.http.routers.backend-socket.rule=Host(`${DOMAIN}`) && PathPrefix(`/socket.io`)"
      - "traefik.http.routers.backend-socket.entrypoints=websecure"
      - "traefik.http.routers.backend-socket.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend-socket.loadbalancer.server.port=3000"
      - "traefik.http.routers.backend-health.rule=Host(`${DOMAIN}`) && PathPrefix(`/health`)"
      - "traefik.http.routers.backend-health.entrypoints=websecure"
      - "traefik.http.routers.backend-health.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend-health.loadbalancer.server.port=3000"
        

  # Database service
  database:
    build: ./database
    container_name: database
    restart: unless-stopped
    # Tuned MariaDB configuration for better performance and stability
    command: >
      --innodb-buffer-pool-size=128M
      --max-connections=150
      --connect-timeout=20
      --wait-timeout=600
      --max-allowed-packet=16M
      --tmp-table-size=32M
      --max-heap-table-size=32M
      --net-read-timeout=30
      --net-write-timeout=60
    ports:
      - "3306:3306"
    volumes:
      - db-data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
      - ./.env:/app/.env:ro
    environment:
    # Change it for your own use credentials
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
    healthcheck:
      test: mysqladmin ping -h database -u ${DB_USER} -p${DB_PASSWORD}
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - bot-network

  phpmyadmin:
       image: phpmyadmin/phpmyadmin
       container_name: phpmyadmin
       restart: unless-stopped
       # ports removed as Traefik will handle this
       environment:
         - PMA_HOST=database
         - PMA_USER=${DB_USER}
         - PMA_PASSWORD=${DB_PASSWORD}
       depends_on:
         database:
           condition: service_healthy
       networks:
         - bot-network
       labels:
         - "traefik.enable=true"
         - "traefik.http.routers.phpmyadmin.rule=Host(`${ADMIN_DOMAIN}`)"
         - "traefik.http.routers.phpmyadmin.entrypoints=websecure"
         - "traefik.http.routers.phpmyadmin.tls.certresolver=letsencrypt"
         - "traefik.http.services.phpmyadmin.loadbalancer.server.port=80"

volumes:
  db-data:
    driver: local

networks:
  bot-network:
    driver: bridge