services:
  # Traefik reverse proxy with auto-configuration
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-data:/etc/traefik/acme
    command:
      # API and dashboard config
      - "--api.insecure=false"
      - "--api.dashboard=true"
      # Docker provider configuration
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      # Entrypoints configuration
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      # Let's Encrypt configuration
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@example.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # Logging
      - "--log.level=INFO"
    networks:
      - bot-network

  # Frontend service
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_BACKEND_URL=${EXTERNAL_HOST:+http://${EXTERNAL_HOST}:3000}
    container_name: frontend
    restart: unless-stopped
    # Remove port mapping as Traefik will handle this
    # ports:
    #   - "80:80"
    environment:
      - NODE_ENV=production
      - VITE_BACKEND_URL=${EXTERNAL_HOST:+http://${EXTERNAL_HOST}:3000}
    volumes:
      # Only mount the images directory for easier updates
      - ./frontend/images:/usr/share/nginx/html/images:ro
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - bot-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${EXTERNAL_HOST}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"


  # Backend service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    expose:
      - "3000"  # Expose to internal network only, Traefik will handle external access
    networks:
      - bot-network
    volumes:
      - ./.env:/app/.env:ro
    environment:
      - NODE_ENV=production
      - DB_HOST=database
      - EXTERNAL_HOST=${EXTERNAL_HOST}
      - DB_USER=${DB_USER:-trading_bot_user}
      - DB_PASSWORD=${DB_PASSWORD:-mariadb_secret}
      - DB_NAME=${DB_NAME:-crypto_trading_bot}
      - BINANCE_API_KEY=${BINANCE_API_KEY:-your_binance_api_key}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET:-your_binance_api_secret}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-your_telegram_bot_token}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID:-your_telegram_chat_id}
      # Add connection configuration
      - DB_CONNECTION_LIMIT=10
      - DB_CONNECT_TIMEOUT=20000
      - API_TIMEOUT_MS=10000
      # WebSocket configuration
      - WS_RECONNECT_DELAY=2000
      - WS_MAX_RECONNECT_DELAY=60000
      - WS_HEARTBEAT_TIMEOUT=30000
      # Trading configuration
      - TRADING_BUY_THRESHOLD=${TRADING_BUY_THRESHOLD:-0.01}
      - TRADING_SELL_THRESHOLD=${TRADING_SELL_THRESHOLD:-0.01}
      - TRADING_DEFAULT_INVESTMENT=${TRADING_DEFAULT_INVESTMENT:-50}
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      database:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${EXTERNAL_HOST}`) && (PathPrefix(`/api/`) || PathPrefix(`/socket.io/`) || PathPrefix(`/health`))"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
      # Special websocket configuration
      - "traefik.http.routers.backend-ws.rule=Host(`${EXTERNAL_HOST}`) && PathPrefix(`/socket.io/`)"
      - "traefik.http.routers.backend-ws.entrypoints=websecure"
      - "traefik.http.routers.backend-ws.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend-ws.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.backend-ws.headers.customrequestheaders.Connection=upgrade"
      - "traefik.http.middlewares.backend-ws.headers.customrequestheaders.Upgrade=websocket"
      - "traefik.http.routers.backend-ws.middlewares=backend-ws"
        

  # Database service
  database:
    build: ./database
    container_name: database
    restart: unless-stopped
    # Tuned MariaDB configuration for better performance and stability
    command: >
      --innodb-buffer-pool-size=128M
      --max-connections=100
      --connect-timeout=20
      --wait-timeout=600
      --max-allowed-packet=16M
      --tmp-table-size=32M
      --max-heap-table-size=32M
      --net-read-timeout=30
      --net-write-timeout=60
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-rootpassword}
      - MYSQL_USER=${DB_USER:-trading_bot_user}
      - MYSQL_PASSWORD=${DB_PASSWORD:-mariadb_secret}
      - MYSQL_DATABASE=${DB_NAME:-crypto_trading_bot}
    ports:
      - "3306:3306"
    volumes:
      - db-data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    healthcheck:
      test: mysqladmin ping -h database -u ${DB_USER:-trading_bot_user} -p${DB_PASSWORD:-mariadb_secret}
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - bot-network

  phpmyadmin:
     image: phpmyadmin/phpmyadmin
     container_name: phpmyadmin
     restart: unless-stopped
     expose:
       - "80"
     environment:
       - PMA_HOST=database
       - PMA_USER=${DB_USER:-trading_bot_user}
       - PMA_PASSWORD=${DB_PASSWORD:-mariadb_secret}
     depends_on:
       database:
         condition: service_healthy
     networks:
       - bot-network
     labels:
       - "traefik.enable=true"
       - "traefik.http.routers.phpmyadmin.rule=Host(`admin.${EXTERNAL_HOST}`)"
       - "traefik.http.routers.phpmyadmin.entrypoints=websecure"
       - "traefik.http.routers.phpmyadmin.tls.certresolver=letsencrypt"
       - "traefik.http.services.phpmyadmin.loadbalancer.server.port=80"

volumes:
  db-data:
    driver: local
  traefik-data:
    driver: local

networks:
  bot-network:
    driver: bridge